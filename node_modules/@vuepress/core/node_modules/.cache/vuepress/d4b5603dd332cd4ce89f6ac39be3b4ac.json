{"remainingRequest":"/home/anthony/PhpstormProjects/XiaomiWiki.github.io/node_modules/babel-loader/lib/index.js??ref--3-1!/home/anthony/PhpstormProjects/XiaomiWiki.github.io/node_modules/@vuepress/plugin-search/match-query.js","dependencies":[{"path":"/home/anthony/PhpstormProjects/XiaomiWiki.github.io/node_modules/@vuepress/plugin-search/match-query.js","mtime":499162500000},{"path":"/home/anthony/PhpstormProjects/XiaomiWiki.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anthony/PhpstormProjects/XiaomiWiki.github.io/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIjsKaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0JzsKZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChxdWVyeSwgcGFnZSkgewogIHZhciBhZGRpdGlvbmFsU3RyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsOwogIHZhciBkb21haW4gPSBnZXQocGFnZSwgJ3RpdGxlJywgJycpOwoKICBpZiAoZ2V0KHBhZ2UsICdmcm9udG1hdHRlci50YWdzJykpIHsKICAgIGRvbWFpbiArPSAiICIuY29uY2F0KHBhZ2UuZnJvbnRtYXR0ZXIudGFncy5qb2luKCcgJykpOwogIH0KCiAgaWYgKGFkZGl0aW9uYWxTdHIpIHsKICAgIGRvbWFpbiArPSAiICIuY29uY2F0KGFkZGl0aW9uYWxTdHIpOwogIH0KCiAgcmV0dXJuIG1hdGNoVGVzdChxdWVyeSwgZG9tYWluKTsKfSk7Cgp2YXIgbWF0Y2hUZXN0ID0gZnVuY3Rpb24gbWF0Y2hUZXN0KHF1ZXJ5LCBkb21haW4pIHsKICB2YXIgZXNjYXBlUmVnRXhwID0gZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikgewogICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLS9cXF4kKis/LigpfFtcXXt9XS9nLCAnXFwkJicpOwogIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4CgoKICB2YXIgbm9uQVNDSUlSZWdFeHAgPSBuZXcgUmVnRXhwKCdbXlx4MDAtXHg3Rl0nKTsKICB2YXIgd29yZHMgPSBxdWVyeS5zcGxpdCgvXHMrL2cpLm1hcChmdW5jdGlvbiAoc3RyKSB7CiAgICByZXR1cm4gc3RyLnRyaW0oKTsKICB9KS5maWx0ZXIoZnVuY3Rpb24gKHN0cikgewogICAgcmV0dXJuICEhc3RyOwogIH0pOwoKICBpZiAoIW5vbkFTQ0lJUmVnRXhwLnRlc3QocXVlcnkpKSB7CiAgICAvLyBpZiB0aGUgcXVlcnkgb25seSBoYXMgQVNDSUkgY2hhcnMsIHRyZWF0IGFzIEVuZ2xpc2gKICAgIHZhciBoYXNUcmFpbGluZ1NwYWNlID0gcXVlcnkuZW5kc1dpdGgoJyAnKTsKICAgIHZhciBzZWFyY2hSZWdleCA9IG5ldyBSZWdFeHAod29yZHMubWFwKGZ1bmN0aW9uICh3b3JkLCBpbmRleCkgewogICAgICBpZiAod29yZHMubGVuZ3RoID09PSBpbmRleCArIDEgJiYgIWhhc1RyYWlsaW5nU3BhY2UpIHsKICAgICAgICAvLyBUaGUgbGFzdCB3b3JkIC0gb2sgd2l0aCB0aGUgd29yZCBiZWluZyAic3RhcnRzd2l0aCItbGlrZQogICAgICAgIHJldHVybiAiKD89LipcXGIiLmNvbmNhdChlc2NhcGVSZWdFeHAod29yZCksICIpIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gTm90IHRoZSBsYXN0IHdvcmQgLSBleHBlY3QgdGhlIHdob2xlIHdvcmQgZXhhY3RseQogICAgICAgIHJldHVybiAiKD89LipcXGIiLmNvbmNhdChlc2NhcGVSZWdFeHAod29yZCksICJcXGIpIik7CiAgICAgIH0KICAgIH0pLmpvaW4oJycpICsgJy4rJywgJ2dpJyk7CiAgICByZXR1cm4gc2VhcmNoUmVnZXgudGVzdChkb21haW4pOwogIH0gZWxzZSB7CiAgICAvLyBpZiB0aGUgcXVlcnkgaGFzIG5vbi1BU0NJSSBjaGFycywgdHJlYXQgYXMgb3RoZXIgbGFuZ3VhZ2VzCiAgICByZXR1cm4gd29yZHMuc29tZShmdW5jdGlvbiAod29yZCkgewogICAgICByZXR1cm4gZG9tYWluLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih3b3JkKSA+IC0xOwogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["/home/anthony/PhpstormProjects/XiaomiWiki.github.io/node_modules/@vuepress/plugin-search/match-query.js"],"names":["get","query","page","additionalStr","domain","frontmatter","tags","join","matchTest","escapeRegExp","str","replace","nonASCIIRegExp","RegExp","words","split","map","trim","filter","test","hasTrailingSpace","endsWith","searchRegex","word","index","length","some","toLowerCase","indexOf"],"mappings":";;;;;;;;;;;;AACA,OAAOA,GAAP,MAAgB,YAAhB;AAEA,gBAAe,UAACC,KAAD,EAAQC,IAAR,EAAuC;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AACpD,MAAIC,MAAM,GAAGJ,GAAG,CAACE,IAAD,EAAO,OAAP,EAAgB,EAAhB,CAAhB;;AAEA,MAAIF,GAAG,CAACE,IAAD,EAAO,kBAAP,CAAP,EAAmC;AACjCE,IAAAA,MAAM,eAAQF,IAAI,CAACG,WAAL,CAAiBC,IAAjB,CAAsBC,IAAtB,CAA2B,GAA3B,CAAR,CAAN;AACD;;AAED,MAAIJ,aAAJ,EAAmB;AACjBC,IAAAA,MAAM,eAAQD,aAAR,CAAN;AACD;;AAED,SAAOK,SAAS,CAACP,KAAD,EAAQG,MAAR,CAAhB;AACD,CAZD;;AAcA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACP,KAAD,EAAQG,MAAR,EAAmB;AACnC,MAAMK,YAAY,GAAG,SAAfA,YAAe,CAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,OAAJ,CAAY,uBAAZ,EAAqC,MAArC,CAAJ;AAAA,GAAxB,CADmC,CAGnC;;;AACA,MAAMC,cAAc,GAAG,IAAIC,MAAJ,CAAW,cAAX,CAAvB;AAEA,MAAMC,KAAK,GAAGb,KAAK,CAChBc,KADW,CACL,MADK,EAEXC,GAFW,CAEP,UAAAN,GAAG;AAAA,WAAIA,GAAG,CAACO,IAAJ,EAAJ;AAAA,GAFI,EAGXC,MAHW,CAGJ,UAAAR,GAAG;AAAA,WAAI,CAAC,CAACA,GAAN;AAAA,GAHC,CAAd;;AAKA,MAAI,CAACE,cAAc,CAACO,IAAf,CAAoBlB,KAApB,CAAL,EAAiC;AAC/B;AACA,QAAMmB,gBAAgB,GAAGnB,KAAK,CAACoB,QAAN,CAAe,GAAf,CAAzB;AACA,QAAMC,WAAW,GAAG,IAAIT,MAAJ,CAClBC,KAAK,CACJE,GADD,CACK,UAACO,IAAD,EAAOC,KAAP,EAAiB;AACpB,UAAIV,KAAK,CAACW,MAAN,KAAiBD,KAAK,GAAG,CAAzB,IAA8B,CAACJ,gBAAnC,EAAqD;AACnD;AACA,iCAAkBX,YAAY,CAACc,IAAD,CAA9B;AACD,OAHD,MAGO;AACL;AACA,iCAAkBd,YAAY,CAACc,IAAD,CAA9B;AACD;AACF,KATD,EAUChB,IAVD,CAUM,EAVN,IAUY,IAXM,EAYlB,IAZkB,CAApB;AAcA,WAAOe,WAAW,CAACH,IAAZ,CAAiBf,MAAjB,CAAP;AACD,GAlBD,MAkBO;AACL;AACA,WAAOU,KAAK,CAACY,IAAN,CAAW,UAAAH,IAAI;AAAA,aAAInB,MAAM,CAACuB,WAAP,GAAqBC,OAArB,CAA6BL,IAA7B,IAAqC,CAAC,CAA1C;AAAA,KAAf,CAAP;AACD;AACF,CAjCD","sourcesContent":["\nimport get from 'lodash/get'\n\nexport default (query, page, additionalStr = null) => {\n  let domain = get(page, 'title', '')\n\n  if (get(page, 'frontmatter.tags')) {\n    domain += ` ${page.frontmatter.tags.join(' ')}`\n  }\n\n  if (additionalStr) {\n    domain += ` ${additionalStr}`\n  }\n\n  return matchTest(query, domain)\n}\n\nconst matchTest = (query, domain) => {\n  const escapeRegExp = str => str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n\n  // eslint-disable-next-line no-control-regex\n  const nonASCIIRegExp = new RegExp('[^\\x00-\\x7F]')\n\n  const words = query\n    .split(/\\s+/g)\n    .map(str => str.trim())\n    .filter(str => !!str)\n\n  if (!nonASCIIRegExp.test(query)) {\n    // if the query only has ASCII chars, treat as English\n    const hasTrailingSpace = query.endsWith(' ')\n    const searchRegex = new RegExp(\n      words\n      .map((word, index) => {\n        if (words.length === index + 1 && !hasTrailingSpace) {\n          // The last word - ok with the word being \"startswith\"-like\n          return `(?=.*\\\\b${escapeRegExp(word)})`\n        } else {\n          // Not the last word - expect the whole word exactly\n          return `(?=.*\\\\b${escapeRegExp(word)}\\\\b)`\n        }\n      })\n      .join('') + '.+',\n      'gi'\n    )\n    return searchRegex.test(domain)\n  } else {\n    // if the query has non-ASCII chars, treat as other languages\n    return words.some(word => domain.toLowerCase().indexOf(word) > -1)\n  }\n}\n"]}]}